(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{"8GCN":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("mXGw"),b=n("/FXl"),l=n("TjRS"),c=n("7bnI"),r=n("azgN");n("aD51");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/checkbox/checkbox.mdx"}});var d={_frontmatter:o},u=l.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,b={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(b[n]=e[n]);return b}(e,["components"]);return Object(b.b)(u,i({},d,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"checkbox-单选框"},"Checkbox 单选框"),Object(b.b)("p",null,"实现多种场景的内容单选"),Object(b.b)("h2",{id:"基本使用"},"基本使用"),Object(b.b)("p",null,"单独使用可以表示两种状态之间的切换。"),Object(b.b)(c.c,{__position:0,__code:"<Checkbox checked style={{ marginLeft: '20px' }}>\n  选中状态\n</Checkbox>",__scope:{props:n,DefaultLayout:l.a,Playground:c.c,Props:c.d,Checkbox:r.a},mdxType:"Playground"},Object(b.b)(r.a,{checked:!0,style:{marginLeft:"20px"},mdxType:"Checkbox"},"选中状态")),Object(b.b)("h2",{id:"禁用状态"},"禁用状态"),Object(b.b)("p",null,"多选框不可用状态。"),Object(b.b)(c.c,{__position:1,__code:"<Checkbox disabled style={{ marginLeft: '20px', marginRight: '20px' }}>\n  未选中禁用状态\n</Checkbox>\n<Checkbox checked disabled>\n  选中禁用状态\n</Checkbox>",__scope:{props:n,DefaultLayout:l.a,Playground:c.c,Props:c.d,Checkbox:r.a},mdxType:"Playground"},Object(b.b)(r.a,{disabled:!0,style:{marginLeft:"20px",marginRight:"20px"},mdxType:"Checkbox"},"未选中禁用状态"),Object(b.b)(r.a,{checked:!0,disabled:!0,mdxType:"Checkbox"},"选中禁用状态")),Object(b.b)("h2",{id:"多选框组"},"多选框组"),Object(b.b)("p",null,"适用于多个勾选框绑定到同一个数组的情景"),Object(b.b)(c.c,{__position:2,__code:'<Checkbox.Group value={[\'2\']} style={{ marginLeft: \'20px\' }}>\n  <Checkbox label="1"></Checkbox>\n  <Checkbox label="2"></Checkbox>\n  <Checkbox label="3"></Checkbox>\n</Checkbox.Group>',__scope:{props:n,DefaultLayout:l.a,Playground:c.c,Props:c.d,Checkbox:r.a},mdxType:"Playground"},Object(b.b)(r.a.Group,{value:["2"],style:{marginLeft:"20px"}},Object(b.b)(r.a,{label:"1",mdxType:"Checkbox"}),Object(b.b)(r.a,{label:"2",mdxType:"Checkbox"}),Object(b.b)(r.a,{label:"3",mdxType:"Checkbox"}))),Object(b.b)("h2",{id:"indeterminate状态"},"indeterminate状态"),Object(b.b)("p",null,"用于表示多选框的不确定状态"),Object(b.b)(c.c,{__position:3,__code:"() => {\n  const [checkAll, setcheckAll] = React.useState(false)\n  const [cities, setcities] = React.useState(['上海', '北京', '广州', '深圳'])\n  const [checkedCities, setcheckedCities] = React.useState(['上海', '北京'])\n  const [isIndeterminate, setisIndeterminate] = React.useState(true)\n  function handleCheckAllChange(checked) {\n    setisIndeterminate(false)\n    setcheckAll(checked)\n    setcheckedCities(checked ? ['上海', '北京', '广州', '深圳'] : [])\n  }\n  function handleCheckedCitiesChange(value) {\n    const checkedCount = value.length\n    const citiesLength = cities.length\n    setcheckedCities(value)\n    setcheckAll(checkedCount === citiesLength)\n    setisIndeterminate(checkedCount > 0 && checkedCount < citiesLength)\n  }\n  return (\n    <div style={{ marginLeft: '20px' }}>\n      <Checkbox\n        checked={checkAll}\n        indeterminate={isIndeterminate}\n        onChange={() => handleCheckAllChange(true)}\n      >\n        全选\n      </Checkbox>\n      <Checkbox.Group\n        value={checkedCities}\n        onChange={value => handleCheckedCitiesChange(value)}\n      >\n        {cities.map((city, index) => (\n          <Checkbox key={index} label={city}></Checkbox>\n        ))}\n      </Checkbox.Group>\n    </div>\n  )\n}",__scope:{props:n,DefaultLayout:l.a,Playground:c.c,Props:c.d,Checkbox:r.a},mdxType:"Playground"},(function(){var e=a.useState(!1),t=e[0],n=e[1],l=a.useState(["上海","北京","广州","深圳"]),c=l[0],i=(l[1],a.useState(["上海","北京"])),o=i[0],d=i[1],u=a.useState(!0),p=u[0],m=u[1];return Object(b.b)("div",{style:{marginLeft:"20px"}},Object(b.b)(r.a,{checked:t,indeterminate:p,onChange:function(){return e=!0,m(!1),n(e),void d(e?["上海","北京","广州","深圳"]:[]);var e},mdxType:"Checkbox"},"全选"),Object(b.b)(r.a.Group,{value:o,onChange:function(e){return function(e){var t=e.length,a=c.length;d(e),n(t===a),m(t>0&&t<a)}(e)}},c.map((function(e,t){return Object(b.b)(r.a,{key:t,label:e,mdxType:"Checkbox"})}))))})),Object(b.b)("h2",{id:"属性"},"属性"),Object(b.b)("h3",{id:"checkbox-相关属性"},"Checkbox 相关属性"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",i({parentName:"tr"},{align:null}),"属性名"),Object(b.b)("th",i({parentName:"tr"},{align:null}),"名称"),Object(b.b)("th",i({parentName:"tr"},{align:null}),"类型"),Object(b.b)("th",i({parentName:"tr"},{align:null}),"默认值"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"checked"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"是否选中"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"[String, number, Boolean]"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"disabled"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"是否禁用"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"Boolean"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"label"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"标示"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"string"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"indeterminate"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"是否为不稳定状态"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"Boolean"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"false")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"onChange"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"选中状态改变回调"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"function"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"() => {}")))),Object(b.b)("h3",{id:"checkboxgroup-相关属性"},"CheckboxGroup 相关属性"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",i({parentName:"tr"},{align:null}),"属性名"),Object(b.b)("th",i({parentName:"tr"},{align:null}),"名称"),Object(b.b)("th",i({parentName:"tr"},{align:null}),"类型"),Object(b.b)("th",i({parentName:"tr"},{align:null}),"默认值"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"min"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"最小选择数量"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"[String, number]"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"max"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"最大选择数量"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"[String, number]"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"value"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"选中值"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"string"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"size"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"单选框大小"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"['large', 'small']"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"fill"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"填充颜色"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"string"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"textColor"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"文本颜色"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"string"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"-")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",i({parentName:"tr"},{align:null}),"onChange"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"选中状态改变回调"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"function"),Object(b.b)("td",i({parentName:"tr"},{align:null}),"() => {}")))))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/checkbox/checkbox.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-checkbox-checkbox-mdx-f062ad3e2931ff1b7190.js.map